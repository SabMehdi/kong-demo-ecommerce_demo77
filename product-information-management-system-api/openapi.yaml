{
  "openapi": "3.0.3",
  "info": {
    "title": "Product Information Management System API",
    "description": "The Product Information Management (PIM) system serves as the single source of truth for all product data in the e-commerce ecosystem. It centralizes, enriches, and manages product information, ensuring accuracy, completeness, and consistency across all sales channels, marketing platforms, and backend systems. This API provides comprehensive access to manage products, variants, categories, attributes, assets, pricing, and related PIM workflows.",
    "version": "1.1.0",
    "contact": {
      "name": "API Support Team",
      "url": "https://developer.example.com/support",
      "email": "api-support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://kong:8000",
      "description": "Production PIM Server"
    },
    {
      "url": "http://api.pim.com",
      "description": "Production Environment"
    }
  ],
  "tags": [
    {
      "name": "Product Management",
      "description": "Core operations for creating, retrieving, updating, and deleting products."
    },
    {
      "name": "Product Variants",
      "description": "Operations specific to managing product variants (SKUs)."
    },
    {
      "name": "Categories",
      "description": "Operations for managing the product category hierarchy."
    },
    {
      "name": "Attributes and Specifications",
      "description": "Operations related to defining and managing product attributes, attribute groups, and technical specifications."
    },
    {
      "name": "Digital Assets",
      "description": "Operations for managing digital assets (images, videos, documents) and linking them to products."
    },
    {
      "name": "Pricing",
      "description": "Operations related to managing product price lists and specific price points."
    },
    {
      "name": "Bulk Operations",
      "description": "Endpoints for performing actions on multiple entities simultaneously (e.g., bulk import/export, bulk updates)."
    },
    {
      "name": "Syndication",
      "description": "Operations related to distributing product data to various output channels."
    },
    {
      "name": "Workflow and Validation",
      "description": "Operations related to product enrichment workflows, data validation rules, completeness checks, and task management."
    },
    {
      "name": "Administration",
      "description": "System administration operations, including user management, roles, and audit trails."
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Product Management"
        ],
        "summary": "List products with filtering and pagination",
        "description": "Retrieves a paginated list of products, allowing filtering by various criteria like status, category, attributes, and modification date.",
        "operationId": "listProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by product status (e.g., `active`, `draft`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[category]",
            "in": "query",
            "description": "Filter by category ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[attribute][{attributeId}]",
            "in": "query",
            "description": "Filter by a specific attribute value (replace `{attributeId}` with the actual attribute ID, e.g., `filter[attribute][color]=Red`).",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": "filter[attribute][attr_color]=Red"
          },
          {
            "name": "filter[updatedSince]",
            "in": "query",
            "description": "Filter products updated since the given timestamp (ISO 8601 format).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by field. Prefix with '-' for descending order (e.g., `-updatedAt`, `name`).",
            "schema": {
              "type": "string",
              "example": "-updatedAt"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma-separated list of related resources to include in the response (e.g., `variants`, `assets`, `categories`).",
            "schema": {
              "type": "string"
            },
            "example": "variants,assets"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductSummary"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "prod_elec_tv_sony_bravia_xr_a90j",
                      "sku": "XR65A90J",
                      "name": "Sony BRAVIA XR A90J 65\" OLED 4K HDR Smart TV",
                      "status": "active",
                      "_links": {
                        "self": {
                          "href": "/products/prod_elec_tv_sony_bravia_xr_a90j"
                        }
                      }
                    },
                    {
                      "id": "prod_app_shirt_cotton_crew",
                      "sku": "TSHIRT-CREW-BL-M",
                      "name": "Men's Cotton Crew Neck T-Shirt",
                      "status": "active",
                      "_links": {
                        "self": {
                          "href": "/products/prod_app_shirt_cotton_crew"
                        }
                      }
                    }
                  ],
                  "pagination": {
                    "totalItems": 1532,
                    "limit": 20,
                    "offset": 0,
                    "totalPages": 77,
                    "currentPage": 1
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-products-with-filtering-and-pagination"
      },
      "post": {
        "tags": [
          "Product Management"
        ],
        "summary": "Create a new product",
        "description": "Creates a new base product record. Variants, assets, and detailed attributes can be added subsequently.",
        "operationId": "createProduct",
        "requestBody": {
          "description": "Product object that needs to be added to the store.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              },
              "example": {
                "sku": "BK-CRB-ROAD-58",
                "name": "Carbon Fiber Road Bike - 58cm",
                "productType": "bicycle",
                "status": "draft",
                "brand": "brand_peakcycle",
                "description": {
                  "en_US": "Lightweight carbon fiber road bike, perfect for competitive cycling.",
                  "fr_FR": "V\u00e9lo de route l\u00e9ger en fibre de carbone, parfait pour le cyclisme de comp\u00e9tition."
                },
                "categoryIds": [
                  "cat_sports_cycling_bikes_road"
                ],
                "attributes": {
                  "material": "Carbon Fiber",
                  "frame_size_cm": "58"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetail"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "URL of the newly created product.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-new-product"
      }
    },
    "/products/{productId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Product Management"
        ],
        "summary": "Get product details by ID",
        "description": "Retrieves comprehensive details for a specific product, including its attributes, variants, assets, categories, and related information.",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Comma-separated list of related resources to include (e.g., `variants`, `assets`, `categories`, `completeness`).",
            "schema": {
              "type": "string"
            },
            "example": "variants,assets,categories,completeness"
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Specify the locale for localized attributes (e.g., `en_US`, `de_DE`). If omitted, the system default or all locales might be returned.",
            "schema": {
              "type": "string"
            },
            "example": "en_US"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information for the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetail"
                },
                "example": {
                  "id": "prod_elec_tv_sony_bravia_xr_a90j",
                  "sku": "XR-A90J-BASE",
                  "name": "Sony BRAVIA XR A90J OLED 4K HDR Smart TV",
                  "productType": "television",
                  "status": "active",
                  "lifecycleStatus": "active",
                  "brand": "brand_sony",
                  "manufacturer": "Sony Corporation",
                  "description": {
                    "en_US": "Experience supreme contrast and sound with Sony's flagship Master Series OLED TV.",
                    "es_ES": "Experimenta un contraste y sonido supremos con el televisor OLED insignia de la serie Master de Sony."
                  },
                  "seo": {
                    "metaTitle": {
                      "en_US": "Sony BRAVIA XR A90J OLED TV | Best 4K HDR Smart TV"
                    },
                    "metaDescription": {
                      "en_US": "Shop the Sony A90J Master Series OLED TV. Features Cognitive Processor XR\u2122, XR OLED Contrast Pro, and Google TV."
                    },
                    "slug": {
                      "en_US": "sony-bravia-xr-a90j-oled-4k-hdr-smart-tv"
                    }
                  },
                  "dimensions": {
                    "weight": {
                      "value": 22.5,
                      "unit": "kg"
                    },
                    "height": {
                      "value": 83.3,
                      "unit": "cm"
                    },
                    "width": {
                      "value": 144.8,
                      "unit": "cm"
                    },
                    "depth": {
                      "value": 4.1,
                      "unit": "cm"
                    }
                  },
                  "countryOfOrigin": "MY",
                  "attributes": {
                    "screen_technology": "OLED",
                    "resolution": "4K UHD (3840 x 2160)",
                    "hdr_support": [
                      "HDR10",
                      "HLG",
                      "Dolby Vision"
                    ],
                    "smart_tv_platform": "Google TV",
                    "refresh_rate_hz": "120",
                    "hdmi_ports": "4"
                  },
                  "variants": [
                    {
                      "id": "var_a90j_55",
                      "sku": "XR55A90J",
                      "_links": {
                        "self": {
                          "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/variants/var_a90j_55"
                        }
                      }
                    },
                    {
                      "id": "var_a90j_65",
                      "sku": "XR65A90J",
                      "_links": {
                        "self": {
                          "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/variants/var_a90j_65"
                        }
                      }
                    },
                    {
                      "id": "var_a90j_83",
                      "sku": "XR83A90J",
                      "_links": {
                        "self": {
                          "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/variants/var_a90j_83"
                        }
                      }
                    }
                  ],
                  "categories": [
                    {
                      "id": "cat_electronics",
                      "name": "Electronics",
                      "_links": {
                        "self": {
                          "href": "/categories/cat_electronics"
                        }
                      }
                    },
                    {
                      "id": "cat_electronics_tv_video",
                      "name": "TV & Video",
                      "_links": {
                        "self": {
                          "href": "/categories/cat_electronics_tv_video"
                        }
                      }
                    },
                    {
                      "id": "cat_electronics_tv_video_tvs",
                      "name": "Televisions",
                      "_links": {
                        "self": {
                          "href": "/categories/cat_electronics_tv_video_tvs"
                        }
                      }
                    }
                  ],
                  "assets": [
                    {
                      "id": "asset_a90j_front",
                      "url": "https://cdn.example.com/assets/sony_a90j_front.jpg",
                      "type": "image",
                      "tags": [
                        "main",
                        "front_view"
                      ],
                      "_links": {
                        "self": {
                          "href": "/assets/asset_a90j_front"
                        }
                      }
                    },
                    {
                      "id": "asset_a90j_side",
                      "url": "https://cdn.example.com/assets/sony_a90j_side.jpg",
                      "type": "image",
                      "tags": [
                        "gallery",
                        "side_view"
                      ],
                      "_links": {
                        "self": {
                          "href": "/assets/asset_a90j_side"
                        }
                      }
                    }
                  ],
                  "completeness": {
                    "score": 95.2,
                    "status": "complete",
                    "channelScores": {
                      "ch_web_us": 98,
                      "ch_amazon_us": 92.5
                    }
                  },
                  "createdAt": "2023-01-15T10:00:00Z",
                  "updatedAt": "2023-10-28T14:35:10Z",
                  "createdBy": "user_admin",
                  "updatedBy": "user_editor_jane",
                  "_links": {
                    "self": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j"
                    },
                    "variants": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/variants"
                    },
                    "categories": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/categories"
                    },
                    "assets": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/assets"
                    },
                    "prices": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/prices"
                    },
                    "completeness": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/completeness"
                    },
                    "validation": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/validation"
                    },
                    "history": {
                      "href": "/products/prod_elec_tv_sony_bravia_xr_a90j/history"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-product-details-by-id"
      },
      "put": {
        "tags": [
          "Product Management"
        ],
        "summary": "Update an existing product (overwrite)",
        "description": "Updates an existing product by replacing the entire product resource with the provided data. Use PATCH for partial updates.",
        "operationId": "updateProduct",
        "requestBody": {
          "description": "Complete product object data to replace the existing product.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-an-existing-product-overwrite"
      },
      "patch": {
        "tags": [
          "Product Management"
        ],
        "summary": "Partially update an existing product",
        "description": "Applies partial updates to a product. Only the fields provided in the request body will be modified.",
        "operationId": "patchProduct",
        "requestBody": {
          "description": "Fields to update for the product.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPatchInput"
              },
              "example": {
                "status": "active",
                "description": {
                  "en_US": "Updated product description with new features."
                },
                "attributes": {
                  "warranty_years": "3"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product partially updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetail"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-an-existing-product"
      },
      "delete": {
        "tags": [
          "Product Management"
        ],
        "summary": "Delete a product",
        "description": "Permanently deletes a product and its associated variants. Use with caution.",
        "operationId": "deleteProduct",
        "responses": {
          "204": {
            "description": "Product deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "delete-a-product"
      }
    },
    "/products/search": {
      "get": {
        "tags": [
          "Product Management"
        ],
        "summary": "Search products using a query string",
        "description": "Performs a full-text search across product names, descriptions, SKUs, and potentially other indexed attributes.",
        "operationId": "searchProducts",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The search term or query string.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Bravia OLED TV"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional structured filter criteria (similar to listProducts, e.g., `filter[status]=active`).",
            "style": "deepObject",
            "explode": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma-separated list of related resources to include.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products matching the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductSummary"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "search-products-using-a-query-string"
      }
    },
    "/products/{productId}/history": {
      "get": {
        "tags": [
          "Product Management"
        ],
        "summary": "Get product revision history",
        "description": "Retrieves the history of changes made to a specific product.",
        "operationId": "getProductHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/productId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of product revision entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RevisionEntry"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-product-revision-history"
      }
    },
    "/products/{productId}/variants": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "List product variants",
        "description": "Retrieves all variants (SKUs) associated with a specific base product.",
        "operationId": "listProductVariants",
        "responses": {
          "200": {
            "description": "A list of variants for the specified product.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variant"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "list-product-variants"
      },
      "post": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Create a product variant",
        "description": "Adds a new variant (SKU) to an existing product.",
        "operationId": "createProductVariant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantInput"
              },
              "example": {
                "sku": "XR65A90J",
                "status": "active",
                "gtin": {
                  "type": "UPC",
                  "value": "027242922065"
                },
                "attributes": {
                  "screen_size_in": "65",
                  "color": "Black"
                },
                "dimensions": {
                  "weight": {
                    "value": 22.5,
                    "unit": "kg"
                  },
                  "height": {
                    "value": 83.3,
                    "unit": "cm"
                  },
                  "width": {
                    "value": 144.8,
                    "unit": "cm"
                  },
                  "depth": {
                    "value": 4.1,
                    "unit": "cm"
                  }
                },
                "prices": [
                  {
                    "priceListId": "pl_retail_usd",
                    "currency": "USD",
                    "amount": 3799.99
                  }
                ],
                "stock": {
                  "warehouse_us_east": 50,
                  "warehouse_us_west": 35
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Variant created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-product-variant"
      }
    },
    "/products/{productId}/variants/{variantId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        },
        {
          "$ref": "#/components/parameters/variantId"
        }
      ],
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Get variant details",
        "description": "Retrieves the details of a specific product variant (SKU).",
        "operationId": "getProductVariantById",
        "responses": {
          "200": {
            "description": "Details of the specific product variant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-variant-details"
      },
      "put": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Update a product variant (overwrite)",
        "description": "Updates an existing variant by replacing the entire variant resource with the provided data. Use PATCH for partial updates.",
        "operationId": "updateProductVariant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Variant updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-a-product-variant-overwrite"
      },
      "patch": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Partially update a product variant",
        "description": "Applies partial updates to a variant. Only the fields provided in the request body will be modified.",
        "operationId": "patchProductVariant",
        "requestBody": {
          "description": "Fields to update for the variant.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VariantPatchInput"
              },
              "example": {
                "status": "discontinued",
                "stock": {
                  "warehouse_us_east": 0
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Variant partially updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Variant"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-a-product-variant"
      },
      "delete": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Delete a product variant",
        "description": "Permanently deletes a specific product variant (SKU).",
        "operationId": "deleteProductVariant",
        "responses": {
          "204": {
            "description": "Variant deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "delete-a-product-variant"
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "List categories",
        "description": "Retrieves a list of product categories, potentially filtered by parent or level.",
        "operationId": "listCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[parent]",
            "in": "query",
            "description": "Filter by parent category ID (use 'null' for root categories).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[level]",
            "in": "query",
            "description": "Filter by category level in the hierarchy (0 for root).",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort results by field (e.g., `name`, `sortOrder`).",
            "schema": {
              "type": "string",
              "example": "sortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of product categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-categories"
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Creates a new category within the hierarchy.",
        "operationId": "createCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              },
              "example": {
                "name": {
                  "en_US": "Road Bikes",
                  "fr_FR": "V\u00e9los de Route"
                },
                "parentId": "cat_sports_cycling_bikes",
                "code": "road_bikes",
                "sortOrder": 10
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-new-category"
      }
    },
    "/categories/tree": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get the category tree",
        "description": "Retrieves the entire category hierarchy as a nested tree structure.",
        "operationId": "getCategoryTree",
        "parameters": [
          {
            "name": "maxDepth",
            "in": "query",
            "description": "Optional maximum depth of the tree to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The category tree structure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryTreeNode"
                  }
                },
                "example": [
                  {
                    "id": "cat_electronics",
                    "name": {
                      "en_US": "Electronics"
                    },
                    "code": "electronics",
                    "level": 0,
                    "children": [
                      {
                        "id": "cat_electronics_tv_video",
                        "name": {
                          "en_US": "TV & Video"
                        },
                        "code": "tv_video",
                        "level": 1,
                        "children": [
                          {
                            "id": "cat_electronics_tv_video_tvs",
                            "name": {
                              "en_US": "Televisions"
                            },
                            "code": "tvs",
                            "level": 2,
                            "children": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "get-the-category-tree"
      }
    },
    "/categories/{categoryId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/categoryId"
        }
      ],
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category details",
        "description": "Retrieves details for a specific category, including its path and potentially assigned attributes.",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Comma-separated list of related resources (e.g., `attributes`, `parent`, `children`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the specific category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-category-details"
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update a category (overwrite)",
        "description": "Updates an existing category by replacing the entire resource.",
        "operationId": "updateCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-a-category-overwrite"
      },
      "patch": {
        "tags": [
          "Categories"
        ],
        "summary": "Partially update a category",
        "description": "Applies partial updates to a category.",
        "operationId": "patchCategory",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryPatchInput"
              },
              "example": {
                "name": {
                  "en_US": "Road Cycling Bikes"
                },
                "sortOrder": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-a-category"
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category",
        "description": "Deletes a category. This might fail if the category contains products or subcategories, depending on system configuration.",
        "operationId": "deleteCategory",
        "responses": {
          "204": {
            "description": "Category deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Category cannot be deleted (e.g., contains subcategories or products).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "delete-a-category"
      }
    },
    "/categories/{categoryId}/products": {
      "get": {
        "tags": [
          "Categories",
          "Product Management"
        ],
        "summary": "List products in a category",
        "description": "Retrieves a paginated list of products belonging to the specified category.",
        "operationId": "listCategoryProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/categoryId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "includeSubcategories",
            "in": "query",
            "description": "Whether to include products from subcategories.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products belonging to the category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductSummary"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "list-products-in-a-category"
      }
    },
    "/products/{productId}/categories": {
      "post": {
        "tags": [
          "Product Management",
          "Categories"
        ],
        "summary": "Assign categories to a product",
        "operationId": "assignCategoriesToProduct",
        "parameters": [
          {
            "$ref": "#/components/parameters/productId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "List of category IDs to assign.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "cat_electronics_tv_video_tvs",
                      "cat_featured_products"
                    ]
                  }
                },
                "required": [
                  "categoryIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Categories assigned successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "assign-categories-to-a-product"
      },
      "put": {
        "tags": [
          "Product Management",
          "Categories"
        ],
        "summary": "Set product categories (overwrite)",
        "description": "Replaces all existing category assignments for a product with the provided list.",
        "operationId": "setProductCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/productId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Complete list of category IDs to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "cat_electronics_tv_video_tvs"
                    ]
                  }
                },
                "required": [
                  "categoryIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product categories set successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "set-product-categories-overwrite"
      }
    },
    "/products/{productId}/categories/{categoryId}": {
      "delete": {
        "tags": [
          "Product Management",
          "Categories"
        ],
        "summary": "Remove a category assignment from a product",
        "operationId": "removeCategoryFromProduct",
        "parameters": [
          {
            "$ref": "#/components/parameters/productId"
          },
          {
            "$ref": "#/components/parameters/categoryId"
          }
        ],
        "responses": {
          "204": {
            "description": "Category assignment removed successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "remove-a-category-assignment-from-a-product"
      }
    },
    "/attributes": {
      "get": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "List attributes",
        "description": "Retrieves a list of all defined attributes in the system.",
        "operationId": "listAttributes",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[type]",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "text",
                "textarea",
                "number",
                "boolean",
                "select",
                "multiselect",
                "date",
                "asset",
                "reference"
              ]
            }
          },
          {
            "name": "filter[groupId]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of product attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Attribute"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-attributes"
      },
      "post": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Create a new attribute",
        "description": "Defines a new attribute that can be used for products.",
        "operationId": "createAttribute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInput"
              },
              "example": {
                "code": "screen_technology",
                "label": {
                  "en_US": "Screen Technology",
                  "de_DE": "Bildschirmtechnologie"
                },
                "type": "select",
                "groupId": "group_display",
                "scope": "global",
                "isLocalizable": false,
                "isFilterable": true,
                "isSearchable": true,
                "isRequiredForCompleteness": true,
                "sortOrder": 10,
                "options": [
                  {
                    "code": "oled",
                    "label": {
                      "en_US": "OLED"
                    }
                  },
                  {
                    "code": "qled",
                    "label": {
                      "en_US": "QLED"
                    }
                  },
                  {
                    "code": "led",
                    "label": {
                      "en_US": "LED LCD"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-new-attribute"
      }
    },
    "/attributes/{attributeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/attributeId"
        }
      ],
      "get": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Get attribute details",
        "description": "Retrieves the full definition of a specific attribute.",
        "operationId": "getAttributeById",
        "responses": {
          "200": {
            "description": "Details of the specific attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-attribute-details"
      },
      "put": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Update an attribute (overwrite)",
        "description": "Updates an existing attribute definition by replacing the entire resource.",
        "operationId": "updateAttribute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-an-attribute-overwrite"
      },
      "patch": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Partially update an attribute",
        "description": "Applies partial updates to an attribute definition.",
        "operationId": "patchAttribute",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributePatchInput"
              },
              "example": {
                "label": {
                  "en_US": "Display Technology"
                },
                "isFilterable": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-an-attribute"
      },
      "delete": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Delete an attribute",
        "description": "Deletes an attribute definition. This may fail if the attribute is currently in use by products.",
        "operationId": "deleteAttribute",
        "responses": {
          "204": {
            "description": "Attribute deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Attribute cannot be deleted (e.g., in use by products).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "delete-an-attribute"
      }
    },
    "/attributes/{attributeId}/options": {
      "post": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Add options to a select/multiselect attribute",
        "operationId": "addAttributeOptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/attributeId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "List of options to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AttributeOptionInput"
                    }
                  }
                },
                "required": [
                  "options"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Options added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "add-options-to-a-select-multiselect-attribute"
      }
    },
    "/attributes/{attributeId}/options/{optionCode}": {
      "put": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Update an attribute option",
        "operationId": "updateAttributeOption",
        "parameters": [
          {
            "$ref": "#/components/parameters/attributeId"
          },
          {
            "name": "optionCode",
            "in": "path",
            "required": true,
            "description": "Code of the option to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated option data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeOptionInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Option updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-an-attribute-option"
      },
      "delete": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Delete an attribute option",
        "operationId": "deleteAttributeOption",
        "parameters": [
          {
            "$ref": "#/components/parameters/attributeId"
          },
          {
            "name": "optionCode",
            "in": "path",
            "required": true,
            "description": "Code of the option to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Option deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "delete-an-attribute-option"
      }
    },
    "/attribute-groups": {
      "get": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "List attribute groups",
        "description": "Retrieves a list of groups used to organize attributes.",
        "operationId": "listAttributeGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of attribute groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AttributeGroup"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-attribute-groups"
      },
      "post": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Create an attribute group",
        "operationId": "createAttributeGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeGroupInput"
              },
              "example": {
                "code": "tech_specs",
                "label": {
                  "en_US": "Technical Specifications",
                  "de_DE": "Technische Daten"
                },
                "sortOrder": 20
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute group created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-an-attribute-group"
      }
    },
    "/attribute-groups/{groupId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupId"
        }
      ],
      "get": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Get attribute group details",
        "description": "Retrieves details for a specific attribute group.",
        "operationId": "getAttributeGroupById",
        "responses": {
          "200": {
            "description": "Details of the specific attribute group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-attribute-group-details"
      },
      "put": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Update an attribute group (overwrite)",
        "operationId": "updateAttributeGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeGroupInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute group updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-an-attribute-group-overwrite"
      },
      "patch": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Partially update an attribute group",
        "operationId": "patchAttributeGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeGroupPatchInput"
              },
              "example": {
                "label": {
                  "en_US": "Technical Details"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute group updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-an-attribute-group"
      },
      "delete": {
        "tags": [
          "Attributes and Specifications"
        ],
        "summary": "Delete an attribute group",
        "description": "Deletes an attribute group. Attributes within the group may need to be reassigned or deleted first.",
        "operationId": "deleteAttributeGroup",
        "responses": {
          "204": {
            "description": "Attribute group deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Group cannot be deleted (e.g., contains attributes).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "delete-an-attribute-group"
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "List digital assets",
        "description": "Retrieves a paginated list of digital assets, with options for filtering.",
        "operationId": "listAssets",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[type]",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "image",
                "document",
                "video",
                "audio"
              ]
            }
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by asset tag.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[filename]",
            "in": "query",
            "description": "Filter by filename (supports wildcards like '*').",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of digital assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Asset"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-digital-assets"
      },
      "post": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "Upload a new digital asset",
        "description": "Uploads a new file (image, document, video) to the PIM's asset repository.",
        "operationId": "uploadAsset",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The actual file to upload."
                  },
                  "code": {
                    "type": "string",
                    "description": "Optional unique code for the asset. If omitted, one might be generated.",
                    "example": "sony_a90j_manual_en"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description for the asset.",
                    "example": "User Manual for Sony A90J TV (English)"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional tags for categorization.",
                    "example": [
                      "manual",
                      "pdf",
                      "en_US"
                    ]
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "413": {
            "description": "Payload Too Large - File size exceeds limit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "upload-a-new-digital-asset"
      }
    },
    "/assets/{assetId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/assetId"
        }
      ],
      "get": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "Get asset details",
        "description": "Retrieves metadata and information about a specific digital asset.",
        "operationId": "getAssetById",
        "responses": {
          "200": {
            "description": "Details of the specific asset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-asset-details"
      },
      "put": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "Update asset metadata (overwrite)",
        "description": "Updates the metadata for an existing asset by replacing the entire metadata resource.",
        "operationId": "updateAssetMetadata",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset metadata updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-asset-metadata-overwrite"
      },
      "patch": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "Partially update asset metadata",
        "description": "Applies partial updates to an asset's metadata.",
        "operationId": "patchAssetMetadata",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetMetadataPatchInput"
              },
              "example": {
                "tags": [
                  "primary_image",
                  "lifestyle"
                ],
                "description": "Updated lifestyle shot of the product in use."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset metadata updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "partially-update-asset-metadata"
      },
      "delete": {
        "tags": [
          "Digital Assets"
        ],
        "summary": "Delete an asset",
        "description": "Deletes an asset from the repository. This might fail if the asset is currently linked to products.",
        "operationId": "deleteAsset",
        "responses": {
          "204": {
            "description": "Asset deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Asset cannot be deleted (e.g., linked to products).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "delete-an-asset"
      }
    },
    "/products/{productId}/assets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Digital Assets",
          "Product Management"
        ],
        "summary": "List assets associated with a product",
        "description": "Retrieves a list of assets linked to a specific product, potentially including variant-specific assets.",
        "operationId": "listProductAssets",
        "parameters": [
          {
            "name": "variantId",
            "in": "query",
            "description": "Optionally filter assets assigned specifically to this variant ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInherited",
            "in": "query",
            "description": "Whether to include assets inherited from the base product when filtering by variantId.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of assets linked to the product.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetLink"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "list-assets-associated-with-a-product"
      },
      "post": {
        "tags": [
          "Digital Assets",
          "Product Management"
        ],
        "summary": "Link assets to a product or variant",
        "description": "Associates one or more existing assets with a product or a specific variant, potentially defining usage type or order.",
        "operationId": "linkAssetsToProduct",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "links": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AssetLinkInput"
                    },
                    "description": "Array of asset links to create."
                  }
                },
                "required": [
                  "links"
                ]
              },
              "example": {
                "links": [
                  {
                    "assetId": "asset_a90j_front",
                    "usageType": "main_image",
                    "sortOrder": 1
                  },
                  {
                    "assetId": "asset_a90j_side",
                    "usageType": "gallery_image",
                    "sortOrder": 2
                  },
                  {
                    "assetId": "asset_a90j_manual_en",
                    "usageType": "user_manual",
                    "variantId": "var_a90j_65"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assets linked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetLink"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "link-assets-to-a-product-or-variant"
      },
      "put": {
        "tags": [
          "Digital Assets",
          "Product Management"
        ],
        "summary": "Set product/variant asset links (overwrite)",
        "description": "Replaces all existing asset links for a product/variant with the provided list.",
        "operationId": "setProductAssetLinks",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "links": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AssetLinkInput"
                    },
                    "description": "Complete array of asset links to set."
                  }
                },
                "required": [
                  "links"
                ]
              },
              "example": {
                "links": [
                  {
                    "assetId": "asset_a90j_front_new",
                    "usageType": "main_image",
                    "sortOrder": 1
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset links set successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetLink"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "set-product-variant-asset-links-overwrite"
      }
    },
    "/products/{productId}/assets/{assetId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        },
        {
          "$ref": "#/components/parameters/assetId"
        }
      ],
      "delete": {
        "tags": [
          "Digital Assets",
          "Product Management"
        ],
        "summary": "Unlink an asset from a product/variant",
        "description": "Removes the association between a specific asset and a product (or a specific variant if variantId query param is provided).",
        "operationId": "unlinkAssetFromProduct",
        "parameters": [
          {
            "name": "variantId",
            "in": "query",
            "description": "Optional variant ID if unlinking from a specific variant.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Asset unlinked successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "unlink-an-asset-from-a-product-variant"
      }
    },
    "/products/{productId}/prices": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Pricing",
          "Product Management"
        ],
        "summary": "Get all price points for a product or variant",
        "description": "Retrieves all defined price points across different price lists, currencies, and potentially customer groups for a specific product or variant.",
        "operationId": "getProductPrices",
        "parameters": [
          {
            "name": "variantId",
            "in": "query",
            "description": "Optional variant ID to get prices for a specific variant.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[priceListId]",
            "in": "query",
            "description": "Filter by price list ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[currency]",
            "in": "query",
            "description": "Filter by currency code (ISO 4217).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of price points for the product/variant.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Price"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-all-price-points-for-a-product-or-variant"
      },
      "post": {
        "tags": [
          "Pricing",
          "Product Management"
        ],
        "summary": "Create or update price points for a product/variant",
        "description": "Adds or modifies price points for a product or specific variant. Can handle multiple price points in one request.",
        "operationId": "setProductPrices",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prices": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PriceInput"
                    },
                    "description": "Array of price points to create or update."
                  },
                  "variantId": {
                    "type": "string",
                    "description": "Optional variant ID to apply prices to a specific variant.",
                    "example": "XR65A90J"
                  }
                },
                "required": [
                  "prices"
                ]
              },
              "example": {
                "variantId": "XR65A90J",
                "prices": [
                  {
                    "priceListId": "pl_retail_usd",
                    "currency": "USD",
                    "amount": 3799.99
                  },
                  {
                    "priceListId": "pl_retail_cad",
                    "currency": "CAD",
                    "amount": 4799.99
                  },
                  {
                    "priceListId": "pl_promo_usd",
                    "currency": "USD",
                    "amount": 3499.99,
                    "validFrom": "2024-11-20T00:00:00Z",
                    "validTo": "2024-11-30T23:59:59Z"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price points created or updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Price"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-or-update-price-points-for-a-product-variant"
      }
    },
    "/price-lists": {
      "get": {
        "tags": [
          "Pricing"
        ],
        "summary": "List all price lists",
        "description": "Retrieves a list of defined price lists used to manage different pricing strategies.",
        "operationId": "listPriceLists",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of price lists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PriceList"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-all-price-lists"
      },
      "post": {
        "tags": [
          "Pricing"
        ],
        "summary": "Create a new price list",
        "operationId": "createPriceList",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListInput"
              },
              "example": {
                "id": "pl_b2b_eur_tier1",
                "name": "B2B Tier 1 Pricing (EUR)",
                "description": "Pricing for top-tier business customers in Eurozone.",
                "currencyDefault": "EUR"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Price list created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-new-price-list"
      }
    },
    "/price-lists/{listId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/listId"
        }
      ],
      "get": {
        "tags": [
          "Pricing"
        ],
        "summary": "Get price list details",
        "description": "Retrieves the details of a specific price list.",
        "operationId": "getPriceListById",
        "responses": {
          "200": {
            "description": "Details of the specific price list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-price-list-details"
      },
      "put": {
        "tags": [
          "Pricing"
        ],
        "summary": "Update a price list (overwrite)",
        "operationId": "updatePriceList",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price list updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-a-price-list-overwrite"
      },
      "delete": {
        "tags": [
          "Pricing"
        ],
        "summary": "Delete a price list",
        "description": "Deletes a price list. This may fail if prices using this list exist.",
        "operationId": "deletePriceList",
        "responses": {
          "204": {
            "description": "Price list deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Price list cannot be deleted (e.g., contains prices).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "delete-a-price-list"
      }
    },
    "/bulk/export": {
      "post": {
        "tags": [
          "Bulk Operations"
        ],
        "summary": "Initiate a bulk export job",
        "description": "Starts an asynchronous job to export data (e.g., products, categories, prices) based on specified criteria and format.",
        "operationId": "initiateBulkExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportConfig"
              },
              "example": {
                "entityType": "product",
                "format": "csv",
                "columns": [
                  "sku",
                  "name",
                  "status",
                  "attributes.color",
                  "attributes.size",
                  "categories"
                ],
                "filter": {
                  "status": "active",
                  "category": "cat_apparel"
                },
                "locale": "en_US",
                "channelId": "ch_web_us"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Export job accepted and initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "URL to check the status of the export job.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "initiate-a-bulk-export-job"
      }
    },
    "/bulk/import": {
      "post": {
        "tags": [
          "Bulk Operations"
        ],
        "summary": "Initiate a bulk import job",
        "description": "Starts an asynchronous job to import data (e.g., products, prices) from an uploaded file or provided data structure.",
        "operationId": "initiateBulkImport",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file containing data to import (e.g., CSV, XLSX)."
                  },
                  "config": {
                    "type": "string",
                    "format": "json",
                    "description": "JSON string containing the import configuration (see ImportConfig schema). Required if providing a file.",
                    "$ref": "#/components/schemas/ImportConfig"
                  }
                },
                "required": [
                  "file",
                  "config"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Import job accepted and initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            },
            "headers": {
              "Location": {
                "description": "URL to check the status of the import job.",
                "schema": {
                  "type": "string",
                  "format": "url"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "initiate-a-bulk-import-job"
      }
    },
    "/bulk/jobs/{jobId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/jobId"
        }
      ],
      "get": {
        "tags": [
          "Bulk Operations"
        ],
        "summary": "Check bulk job status",
        "description": "Retrieves the current status and progress of an asynchronous bulk import or export job.",
        "operationId": "getBulkJobStatus",
        "responses": {
          "200": {
            "description": "Current status of the bulk job.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            },
            "links": {
              "downloadResult": {
                "operationId": "downloadJobResult",
                "parameters": {
                  "jobId": "$response.body#/jobId"
                },
                "description": "Link to download the result file for completed export jobs."
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "check-bulk-job-status"
      }
    },
    "/bulk/jobs/{jobId}/download": {
      "parameters": [
        {
          "$ref": "#/components/parameters/jobId"
        }
      ],
      "get": {
        "tags": [
          "Bulk Operations"
        ],
        "summary": "Download bulk job result file",
        "description": "Downloads the output file generated by a completed export job.",
        "operationId": "downloadJobResult",
        "responses": {
          "200": {
            "description": "The exported data file.",
            "content": {
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "description": "Conflict - Job is not completed or has no downloadable result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-kong-name": "download-bulk-job-result-file"
      }
    },
    "/channels": {
      "get": {
        "tags": [
          "Syndication"
        ],
        "summary": "List all distribution channels",
        "description": "Retrieves a list of configured output channels where product data can be syndicated.",
        "operationId": "listChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of distribution channels.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Channel"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-all-distribution-channels"
      },
      "post": {
        "tags": [
          "Syndication"
        ],
        "summary": "Create a new channel",
        "operationId": "createChannel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelInput"
              },
              "example": {
                "id": "ch_google_shopping_us",
                "name": "Google Shopping (US)",
                "type": "marketplace",
                "targetSystem": "google_merchant_center",
                "localeDefault": "en_US",
                "currencyDefault": "USD",
                "isActive": true,
                "configuration": {
                  "merchantId": "123456789",
                  "feedType": "product_data",
                  "mappingTemplate": "tpl_google_shopping_v1"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Channel created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "create-a-new-channel"
      }
    },
    "/channels/{channelId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Syndication"
        ],
        "summary": "Get channel details",
        "operationId": "getChannelById",
        "responses": {
          "200": {
            "description": "Details of the specific channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-channel-details"
      },
      "put": {
        "tags": [
          "Syndication"
        ],
        "summary": "Update a channel (overwrite)",
        "operationId": "updateChannel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-a-channel-overwrite"
      },
      "delete": {
        "tags": [
          "Syndication"
        ],
        "summary": "Delete a channel",
        "operationId": "deleteChannel",
        "responses": {
          "204": {
            "description": "Channel deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "delete-a-channel"
      }
    },
    "/channels/{channelId}/products": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Syndication",
          "Product Management"
        ],
        "summary": "List products assigned to a channel",
        "description": "Retrieves a paginated list of products that are currently assigned or eligible for syndication to the specified channel.",
        "operationId": "listChannelProducts",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[syndicationStatus]",
            "in": "query",
            "description": "Filter by the product's syndication status for this channel.",
            "schema": {
              "type": "string",
              "enum": [
                "syndicated",
                "pending",
                "failed",
                "excluded"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products associated with the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProductSyndicationStatus"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "list-products-assigned-to-a-channel"
      },
      "post": {
        "tags": [
          "Syndication"
        ],
        "summary": "Assign products to a channel",
        "description": "Marks specific products as eligible for syndication to this channel.",
        "operationId": "assignProductsToChannel",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of product IDs to assign."
                  }
                },
                "required": [
                  "productIds"
                ]
              },
              "example": {
                "productIds": [
                  "prod_elec_tv_sony_bravia_xr_a90j",
                  "prod_app_shirt_cotton_crew"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products assignment updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "successCount": {
                      "type": "integer"
                    },
                    "failedCount": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "assign-products-to-a-channel"
      }
    },
    "/channels/{channelId}/products/{productId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        },
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "delete": {
        "tags": [
          "Syndication"
        ],
        "summary": "Remove a product assignment from a channel",
        "description": "Excludes a specific product from being syndicated to this channel.",
        "operationId": "removeProductFromChannel",
        "responses": {
          "204": {
            "description": "Product removed from channel assignment successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "remove-a-product-assignment-from-a-channel"
      }
    },
    "/channels/{channelId}/syndicate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "post": {
        "tags": [
          "Syndication"
        ],
        "summary": "Trigger syndication for a channel",
        "description": "Initiates an asynchronous process to syndicate product data (either all assigned products or a specified subset) to the target channel system.",
        "operationId": "triggerChannelSyndication",
        "requestBody": {
          "description": "Optional: Specify product IDs to syndicate, otherwise all assigned/changed products are syndicated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specific product IDs to include in this syndication run."
                  },
                  "forceUpdate": {
                    "type": "boolean",
                    "description": "Force syndication even if product data hasn't changed.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Syndication job accepted and initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "trigger-syndication-for-a-channel"
      }
    },
    "/channels/{channelId}/syndication-logs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelId"
        }
      ],
      "get": {
        "tags": [
          "Syndication"
        ],
        "summary": "Get syndication logs for a channel",
        "description": "Retrieves logs related to past syndication attempts for a specific channel.",
        "operationId": "getChannelSyndicationLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter logs by status (e.g., completed, failed).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[jobId]",
            "in": "query",
            "description": "Filter logs for a specific job ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of syndication log entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SyndicationLogEntry"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-syndication-logs-for-a-channel"
      }
    },
    "/products/{productId}/completeness": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Workflow and Validation",
          "Product Management"
        ],
        "summary": "Get product data completeness score",
        "description": "Calculates and retrieves the data completeness score for a product, potentially broken down by channel requirements.",
        "operationId": "getProductCompleteness",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "Optional: Calculate completeness specifically for the requirements of this channel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product data completeness score and details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletenessScore"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-product-data-completeness-score"
      }
    },
    "/products/{productId}/validation": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Workflow and Validation",
          "Product Management"
        ],
        "summary": "Validate product data against rules",
        "description": "Performs validation checks on the product's data based on configured business rules and constraints.",
        "operationId": "validateProductData",
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "Optional: Validate against rules specific to this channel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product data validation results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "validate-product-data-against-rules"
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "Workflow and Validation"
        ],
        "summary": "List all product workflows",
        "description": "Retrieves a list of defined workflows used for product data enrichment and approval processes.",
        "operationId": "listWorkflows",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of product workflows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workflow"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-all-product-workflows"
      }
    },
    "/workflows/{workflowId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workflowId"
        }
      ],
      "get": {
        "tags": [
          "Workflow and Validation"
        ],
        "summary": "Get workflow definition",
        "operationId": "getWorkflowById",
        "responses": {
          "200": {
            "description": "Details of the workflow definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-workflow-definition"
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Workflow and Validation"
        ],
        "summary": "List tasks",
        "description": "Retrieves a list of workflow tasks, potentially filtered by status, assignee, or product.",
        "operationId": "listTasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[status]",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "in_progress",
                "completed",
                "rejected"
              ]
            }
          },
          {
            "name": "filter[assignee]",
            "in": "query",
            "description": "Filter by assigned user ID or 'unassigned'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[productId]",
            "in": "query",
            "description": "Filter tasks related to a specific product ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[workflowId]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of tasks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-tasks"
      }
    },
    "/tasks/{taskId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taskId"
        }
      ],
      "get": {
        "tags": [
          "Workflow and Validation"
        ],
        "summary": "Get task details",
        "operationId": "getTaskById",
        "responses": {
          "200": {
            "description": "Details of the specific task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-task-details"
      },
      "put": {
        "tags": [
          "Workflow and Validation"
        ],
        "summary": "Update a task",
        "description": "Updates the status, assignee, or other properties of a task.",
        "operationId": "updateTask",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateInput"
              },
              "example": {
                "status": "in_progress",
                "assignee": "user_marketer_bob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "update-a-task"
      }
    },
    "/products/{productId}/workflow-status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productId"
        }
      ],
      "get": {
        "tags": [
          "Workflow and Validation",
          "Product Management"
        ],
        "summary": "Get product workflow status",
        "operationId": "getProductWorkflowStatus",
        "responses": {
          "200": {
            "description": "Current workflow status of the product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWorkflowInfo"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-kong-name": "get-product-workflow-status"
      },
      "put": {
        "tags": [
          "Workflow and Validation",
          "Product Management"
        ],
        "summary": "Advance product workflow status",
        "description": "Manually advances the workflow status of a product (e.g., approve, reject, send to next step). Often used in conjunction with task completion.",
        "operationId": "advanceProductWorkflowStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTransitionInput"
              },
              "example": {
                "action": "approve",
                "comment": "Marketing description approved."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductWorkflowInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-kong-name": "advance-product-workflow-status"
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "List system users",
        "operationId": "listUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "filter[isActive]",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of system users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-system-users"
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "List user roles",
        "operationId": "listRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "list-user-roles"
      }
    },
    "/audit-logs": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get system audit logs",
        "description": "Retrieves a log of actions performed within the PIM system for auditing purposes.",
        "operationId": "getAuditLogs",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter[userId]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[action]",
            "in": "query",
            "description": "Filter by action type (e.g., `product:update`, `login:success`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[entityType]",
            "in": "query",
            "description": "Filter by the type of entity affected (e.g., `product`, `category`, `user`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[entityId]",
            "in": "query",
            "description": "Filter logs related to a specific entity ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[startDate]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[endDate]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of audit log entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuditLogEntry"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "get-system-audit-logs"
      }
    },
    "/system/health": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Check system health",
        "description": "Provides a health check status for the PIM API and its dependent components (database, search index, etc.).",
        "operationId": "getSystemHealth",
        "responses": {
          "200": {
            "description": "System is healthy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemHealth"
                },
                "example": {
                  "status": "UP",
                  "components": {
                    "database": {
                      "status": "UP"
                    },
                    "searchIndex": {
                      "status": "UP"
                    },
                    "assetStorage": {
                      "status": "UP"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - One or more components are down.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemHealth"
                },
                "example": {
                  "status": "DOWN",
                  "components": {
                    "database": {
                      "status": "UP"
                    },
                    "searchIndex": {
                      "status": "DOWN",
                      "details": "Connection timeout"
                    },
                    "assetStorage": {
                      "status": "UP"
                    }
                  }
                }
              }
            }
          }
        },
        "x-kong-name": "check-system-health"
      }
    },
    "/system/stats": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get system statistics",
        "description": "Retrieves high-level statistics about the data managed within the PIM.",
        "operationId": "getSystemStats",
        "responses": {
          "200": {
            "description": "System statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStats"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-kong-name": "get-system-statistics"
      }
    }
  },
  "components": {
    "schemas": {
      "LocalizedString": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Object containing localized string values, where keys are locale codes (e.g., 'en_US', 'de_DE').",
        "example": {
          "en_US": "Product Name",
          "fr_FR": "Nom du Produit",
          "es_ES": "Nombre del Producto"
        }
      },
      "Dimension": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "type": "string",
            "example": "cm"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "DimensionsSet": {
        "type": "object",
        "properties": {
          "weight": {
            "$ref": "#/components/schemas/Dimension"
          },
          "height": {
            "$ref": "#/components/schemas/Dimension"
          },
          "width": {
            "$ref": "#/components/schemas/Dimension"
          },
          "depth": {
            "$ref": "#/components/schemas/Dimension"
          }
        },
        "description": "Set of physical dimensions for a product or package."
      },
      "Gtin": {
        "type": "object",
        "description": "Global Trade Item Number (e.g., UPC, EAN).",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "UPC",
              "EAN",
              "ISBN",
              "GTIN"
            ],
            "example": "UPC"
          },
          "value": {
            "type": "string",
            "example": "012345678905"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "SeoAttributes": {
        "type": "object",
        "description": "Attributes relevant for Search Engine Optimization.",
        "properties": {
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "required": [
          "href"
        ]
      },
      "Links": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Link"
        },
        "description": "HATEOAS links for resource navigation."
      },
      "Pagination": {
        "type": "object",
        "description": "Pagination metadata for collection responses.",
        "properties": {
          "totalItems": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProductSummary": {
        "type": "object",
        "description": "Basic summary information for a product.",
        "properties": {
          "id": {
            "type": "string",
            "example": "prod_elec_tv_sony_bravia_xr_a90j"
          },
          "sku": {
            "type": "string",
            "description": "Base product SKU or identifier.",
            "example": "XR-A90J-BASE"
          },
          "name": {
            "type": "string",
            "description": "Primary product name (often default locale).",
            "example": "Sony BRAVIA XR A90J OLED 4K HDR Smart TV"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "sku",
          "name",
          "status"
        ]
      },
      "ProductDetail": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "prod_elec_tv_sony_bravia_xr_a90j"
              },
              "sku": {
                "type": "string",
                "example": "XR-A90J-BASE"
              },
              "name": {
                "$ref": "#/components/schemas/LocalizedString"
              },
              "productType": {
                "type": "string",
                "description": "Type or family of the product.",
                "example": "television"
              },
              "status": {
                "$ref": "#/components/schemas/StatusEnum"
              },
              "lifecycleStatus": {
                "type": "string",
                "enum": [
                  "new_arrival",
                  "active",
                  "phase_out",
                  "discontinued",
                  "end_of_life"
                ],
                "description": "Product lifecycle stage.",
                "example": "active"
              },
              "brand": {
                "type": "string",
                "description": "Brand identifier.",
                "example": "brand_sony"
              },
              "manufacturer": {
                "type": "string",
                "description": "Manufacturer name or ID.",
                "example": "Sony Corporation"
              },
              "description": {
                "type": "object",
                "description": "Localized product descriptions (e.g., short, long, features).",
                "additionalProperties": {
                  "$ref": "#/components/schemas/LocalizedString"
                },
                "example": {
                  "short_description": {
                    "en_US": "Flagship OLED TV"
                  },
                  "long_description": {
                    "en_US": "Experience supreme contrast..."
                  },
                  "feature_bullets": {
                    "en_US": "* Cognitive Processor XR\n* XR OLED Contrast Pro"
                  }
                }
              },
              "seo": {
                "$ref": "#/components/schemas/SeoAttributes"
              },
              "dimensions": {
                "$ref": "#/components/schemas/DimensionsSet"
              },
              "countryOfOrigin": {
                "type": "string",
                "description": "ISO 3166-1 alpha-2 country code.",
                "example": "MY"
              },
              "isHazardousMaterial": {
                "type": "boolean",
                "default": false
              },
              "attributes": {
                "type": "object",
                "description": "Key-value pairs of product attributes. Values can be simple strings, numbers, booleans, or arrays for multi-select.",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "example": {
                  "screen_technology": "OLED",
                  "resolution": "4K UHD (3840 x 2160)",
                  "hdr_support": [
                    "HDR10",
                    "HLG",
                    "Dolby Vision"
                  ],
                  "smart_tv_platform": "Google TV",
                  "refresh_rate_hz": 120,
                  "hdmi_ports": 4,
                  "energy_star_certified": true
                }
              },
              "variants": {
                "type": "array",
                "description": "Summary list of associated variants (included via 'include' parameter).",
                "items": {
                  "$ref": "#/components/schemas/VariantSummary"
                }
              },
              "categories": {
                "type": "array",
                "description": "Summary list of assigned categories (included via 'include' parameter).",
                "items": {
                  "$ref": "#/components/schemas/CategorySummary"
                }
              },
              "assets": {
                "type": "array",
                "description": "Summary list of linked assets (included via 'include' parameter).",
                "items": {
                  "$ref": "#/components/schemas/AssetLink"
                }
              },
              "relatedProducts": {
                "type": "object",
                "description": "IDs of related products.",
                "properties": {
                  "crossSell": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "upSell": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "accessories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "completeness": {
                "$ref": "#/components/schemas/CompletenessScore",
                "description": "Product completeness information (included via 'include' parameter)."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "createdBy": {
                "type": "string",
                "readOnly": true,
                "example": "user_admin"
              },
              "updatedBy": {
                "type": "string",
                "readOnly": true,
                "example": "user_editor_jane"
              },
              "_links": {
                "$ref": "#/components/schemas/Links"
              }
            }
          }
        ],
        "description": "Comprehensive details of a product."
      },
      "ProductInput": {
        "type": "object",
        "description": "Data required to create or fully update a product.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Unique identifier for the base product.",
            "example": "BK-CRB-ROAD-58"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString",
            "description": "Localized product name."
          },
          "productType": {
            "type": "string",
            "description": "Type or family of the product.",
            "example": "bicycle"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "new_arrival",
              "active",
              "phase_out",
              "discontinued",
              "end_of_life"
            ]
          },
          "brand": {
            "type": "string",
            "example": "brand_peakcycle"
          },
          "manufacturer": {
            "type": "string"
          },
          "description": {
            "type": "object",
            "description": "Localized descriptions (short, long, etc.).",
            "additionalProperties": {
              "$ref": "#/components/schemas/LocalizedString"
            }
          },
          "seo": {
            "$ref": "#/components/schemas/SeoAttributes"
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsSet"
          },
          "countryOfOrigin": {
            "type": "string",
            "example": "TW"
          },
          "isHazardousMaterial": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "description": "Attribute values for the product.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "example": {
              "material": "Carbon Fiber",
              "frame_size_cm": "58"
            }
          },
          "categoryIds": {
            "type": "array",
            "description": "List of category IDs this product belongs to.",
            "items": {
              "type": "string"
            },
            "example": [
              "cat_sports_cycling_bikes_road"
            ]
          },
          "relatedProducts": {
            "type": "object",
            "properties": {
              "crossSell": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "upSell": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "accessories": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "sku",
          "name",
          "productType"
        ]
      },
      "ProductPatchInput": {
        "type": "object",
        "description": "Data for partially updating a product. Only include fields to be changed.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "productType": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "lifecycleStatus": {
            "type": "string",
            "enum": [
              "new_arrival",
              "active",
              "phase_out",
              "discontinued",
              "end_of_life"
            ]
          },
          "brand": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LocalizedString"
            }
          },
          "seo": {
            "$ref": "#/components/schemas/SeoAttributes"
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsSet"
          },
          "countryOfOrigin": {
            "type": "string"
          },
          "isHazardousMaterial": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "description": "Updates specific attributes. Use `null` to remove an attribute value.",
            "example": {
              "warranty_years": "3",
              "color": null
            }
          }
        },
        "minProperties": 1
      },
      "RevisionEntry": {
        "type": "object",
        "description": "An entry in the revision history of an entity.",
        "properties": {
          "revisionId": {
            "type": "string",
            "example": "rev_xyz789"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "example": "user_editor_jane"
          },
          "action": {
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete"
            ],
            "example": "update"
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "description.en_US"
                },
                "oldValue": {
                  "type": "string",
                  "example": "Old description."
                },
                "newValue": {
                  "type": "string",
                  "example": "New updated description."
                }
              }
            }
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Updated marketing copy."
          }
        }
      },
      "VariantSummary": {
        "type": "object",
        "description": "Basic summary of a product variant.",
        "properties": {
          "id": {
            "type": "string",
            "example": "var_a90j_65"
          },
          "sku": {
            "type": "string",
            "example": "XR65A90J"
          },
          "attributes": {
            "type": "object",
            "description": "Variant-defining attributes.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "screen_size_in": "65"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "sku"
        ]
      },
      "Variant": {
        "type": "object",
        "description": "Detailed information about a specific product variant (SKU).",
        "properties": {
          "id": {
            "type": "string",
            "example": "var_a90j_65"
          },
          "productId": {
            "type": "string",
            "readOnly": true,
            "example": "prod_elec_tv_sony_bravia_xr_a90j"
          },
          "sku": {
            "type": "string",
            "example": "XR65A90J"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "gtin": {
            "$ref": "#/components/schemas/Gtin",
            "nullable": true
          },
          "mpn": {
            "type": "string",
            "description": "Manufacturer Part Number.",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "description": "Key-value pairs defining this variant (e.g., size, color). May also include other variant-specific attributes.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "example": {
              "screen_size_in": "65",
              "color": "Black",
              "package_type": "Retail Box"
            }
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsSet",
            "description": "Variant-specific dimensions, if different from the base product."
          },
          "prices": {
            "type": "array",
            "description": "List of prices specific to this variant.",
            "items": {
              "$ref": "#/components/schemas/Price"
            }
          },
          "stock": {
            "type": "object",
            "description": "Stock levels per warehouse or location.",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "example": {
              "warehouse_us_east": 50,
              "warehouse_us_west": 35
            }
          },
          "assets": {
            "type": "array",
            "description": "Assets specifically linked to this variant.",
            "items": {
              "$ref": "#/components/schemas/AssetLink"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "productId",
          "sku",
          "status"
        ]
      },
      "VariantInput": {
        "type": "object",
        "description": "Data required to create or fully update a variant.",
        "properties": {
          "sku": {
            "type": "string",
            "example": "XR65A90J"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "default": "active"
          },
          "gtin": {
            "$ref": "#/components/schemas/Gtin",
            "nullable": true
          },
          "mpn": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "description": "Variant-defining attributes are typically required.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "example": {
              "screen_size_in": "65",
              "color": "Black"
            }
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsSet"
          },
          "prices": {
            "type": "array",
            "description": "Initial price points for the variant.",
            "items": {
              "$ref": "#/components/schemas/PriceInput"
            }
          },
          "stock": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "example": {
              "warehouse_us_east": 50
            }
          }
        },
        "required": [
          "sku",
          "attributes"
        ]
      },
      "VariantPatchInput": {
        "type": "object",
        "description": "Data for partially updating a variant.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "gtin": {
            "$ref": "#/components/schemas/Gtin",
            "nullable": true
          },
          "mpn": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "description": "Updates specific attributes. Use `null` to remove."
          },
          "dimensions": {
            "$ref": "#/components/schemas/DimensionsSet"
          },
          "prices": {
            "type": "array",
            "description": "Replaces the entire price list for the variant.",
            "items": {
              "$ref": "#/components/schemas/PriceInput"
            }
          },
          "stock": {
            "type": "object",
            "description": "Updates stock for specified warehouses. Use `null` to remove.",
            "example": {
              "warehouse_us_east": 0,
              "warehouse_eu_central": null
            }
          }
        },
        "minProperties": 1
      },
      "CategorySummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "cat_electronics_tv_video_tvs"
          },
          "name": {
            "type": "string",
            "example": "Televisions"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Category": {
        "type": "object",
        "description": "Represents a category in the product hierarchy.",
        "properties": {
          "id": {
            "type": "string",
            "example": "cat_electronics_tv_video"
          },
          "code": {
            "type": "string",
            "description": "Unique, human-readable code for the category.",
            "example": "tv_video"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "example": "cat_electronics"
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "description": "Depth level in the hierarchy (0 = root).",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "Materialized path (e.g., 'electronics/tv_video').",
            "readOnly": true
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString",
            "nullable": true
          },
          "image": {
            "$ref": "#/components/schemas/AssetSummary",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "description": "Order within the same level.",
            "example": 10
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "CategoryInput": {
        "type": "object",
        "description": "Data for creating or updating a category.",
        "properties": {
          "code": {
            "type": "string",
            "example": "tv_video"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "example": "cat_electronics"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true,
            "description": "ID of an existing asset to use as the category image."
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "CategoryPatchInput": {
        "type": "object",
        "description": "Data for partially updating a category.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "minProperties": 1
      },
      "CategoryTreeNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          },
          {
            "type": "object",
            "properties": {
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryTreeNode"
                }
              }
            }
          }
        ],
        "description": "Node representation for the category tree structure."
      },
      "AttributeOption": {
        "type": "object",
        "description": "An option for a 'select' or 'multiselect' attribute.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code for the option value.",
            "example": "oled"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "label"
        ]
      },
      "AttributeOptionInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "oled"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "label"
        ]
      },
      "AttributeValidationRule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "regex",
              "minLength",
              "maxLength",
              "min",
              "max",
              "allowedFileTypes"
            ],
            "example": "regex"
          },
          "value": {
            "description": "The value for the rule (e.g., the regex pattern, the min/max number).",
            "example": "^[A-Z]{2}-[0-9]{4}$"
          },
          "errorMessage": {
            "$ref": "#/components/schemas/LocalizedString",
            "description": "Localized error message if validation fails."
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "Attribute": {
        "type": "object",
        "description": "Definition of a product attribute.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "attr_screen_technology"
          },
          "code": {
            "type": "string",
            "description": "Unique code for the attribute.",
            "example": "screen_technology"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString",
            "description": "User-friendly label for the attribute."
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "textarea",
              "number",
              "boolean",
              "select",
              "multiselect",
              "date",
              "datetime",
              "asset",
              "reference",
              "metric"
            ],
            "description": "Data type of the attribute.",
            "example": "select"
          },
          "groupId": {
            "type": "string",
            "description": "ID of the group this attribute belongs to.",
            "example": "group_display"
          },
          "scope": {
            "type": "string",
            "enum": [
              "global",
              "channel",
              "locale"
            ],
            "description": "Scope of the attribute (where its value can differ). 'global' means one value, 'channel' means value can differ per channel, 'locale' means value can differ per locale.",
            "default": "global"
          },
          "isLocalizable": {
            "type": "boolean",
            "description": "Whether the attribute value itself can be localized (applies to text, textarea, asset types primarily).",
            "default": false
          },
          "isFilterable": {
            "type": "boolean",
            "description": "Can be used as a filter/facet in frontend applications.",
            "default": false
          },
          "isSearchable": {
            "type": "boolean",
            "description": "Should be included in full-text search indexes.",
            "default": true
          },
          "isRequiredForCompleteness": {
            "type": "boolean",
            "description": "Is this attribute mandatory for a product to be considered 'complete'?",
            "default": false
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "description": "Order of display within its group."
          },
          "validationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValidationRule"
            }
          },
          "options": {
            "type": "array",
            "description": "Available options (for select/multiselect types).",
            "items": {
              "$ref": "#/components/schemas/AttributeOption"
            },
            "nullable": true
          },
          "referenceEntityType": {
            "type": "string",
            "nullable": true,
            "description": "For 'reference' type, the type of entity it refers to (e.g., 'product', 'brand')."
          },
          "metricFamily": {
            "type": "string",
            "nullable": true,
            "description": "For 'metric' type, the family of units (e.g., 'Weight', 'Length')."
          },
          "defaultUnit": {
            "type": "string",
            "nullable": true,
            "description": "For 'metric' type, the default unit (e.g., 'KILOGRAM', 'CENTIMETER')."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "code",
          "label",
          "type",
          "groupId"
        ]
      },
      "AttributeInput": {
        "type": "object",
        "description": "Data for creating or updating an attribute definition.",
        "properties": {
          "code": {
            "type": "string",
            "example": "screen_technology"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "textarea",
              "number",
              "boolean",
              "select",
              "multiselect",
              "date",
              "datetime",
              "asset",
              "reference",
              "metric"
            ],
            "example": "select"
          },
          "groupId": {
            "type": "string",
            "example": "group_display"
          },
          "scope": {
            "type": "string",
            "enum": [
              "global",
              "channel",
              "locale"
            ],
            "default": "global"
          },
          "isLocalizable": {
            "type": "boolean",
            "default": false
          },
          "isFilterable": {
            "type": "boolean",
            "default": false
          },
          "isSearchable": {
            "type": "boolean",
            "default": true
          },
          "isRequiredForCompleteness": {
            "type": "boolean",
            "default": false
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "validationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValidationRule"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeOptionInput"
            },
            "nullable": true
          },
          "referenceEntityType": {
            "type": "string",
            "nullable": true
          },
          "metricFamily": {
            "type": "string",
            "nullable": true
          },
          "defaultUnit": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "code",
          "label",
          "type",
          "groupId"
        ]
      },
      "AttributePatchInput": {
        "type": "object",
        "description": "Data for partially updating an attribute definition.",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "groupId": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "enum": [
              "global",
              "channel",
              "locale"
            ]
          },
          "isLocalizable": {
            "type": "boolean"
          },
          "isFilterable": {
            "type": "boolean"
          },
          "isSearchable": {
            "type": "boolean"
          },
          "isRequiredForCompleteness": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "validationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValidationRule"
            }
          },
          "referenceEntityType": {
            "type": "string",
            "nullable": true
          },
          "metricFamily": {
            "type": "string",
            "nullable": true
          },
          "defaultUnit": {
            "type": "string",
            "nullable": true
          }
        },
        "minProperties": 1
      },
      "AttributeGroup": {
        "type": "object",
        "description": "A grouping for organizing attributes.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "group_display"
          },
          "code": {
            "type": "string",
            "description": "Unique code for the group.",
            "example": "display"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString",
            "description": "User-friendly label for the group."
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "description": "Order of display for the group."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "code",
          "label"
        ]
      },
      "AttributeGroupInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "display"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "label"
        ]
      },
      "AttributeGroupPatchInput": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "minProperties": 1
      },
      "AssetSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "asset_a90j_front"
          },
          "code": {
            "type": "string",
            "example": "a90j_front"
          },
          "filename": {
            "type": "string",
            "example": "sony_a90j_front.jpg"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "filename",
          "url"
        ]
      },
      "AssetRendition": {
        "type": "object",
        "description": "A specific version or size of an asset (e.g., thumbnail).",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code identifying the rendition type.",
            "example": "thumbnail_small"
          },
          "url": {
            "type": "string",
            "format": "url",
            "example": "https://cdn.example.com/assets/renditions/sony_a90j_front_thumb_s.jpg"
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "mimeType": {
            "type": "string",
            "example": "image/jpeg"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "example": 5120
          }
        },
        "required": [
          "code",
          "url"
        ]
      },
      "Asset": {
        "type": "object",
        "description": "Represents a digital asset (image, document, video).",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "asset_a90j_front"
          },
          "code": {
            "type": "string",
            "description": "Optional unique code for the asset.",
            "example": "a90j_front"
          },
          "filename": {
            "type": "string",
            "description": "Original filename.",
            "example": "sony_a90j_front.jpg"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "document",
              "video",
              "audio"
            ],
            "example": "image"
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "URL to the primary/original asset file.",
            "example": "https://cdn.example.com/assets/originals/sony_a90j_front.jpg"
          },
          "mimeType": {
            "type": "string",
            "example": "image/jpeg"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "Size of the original file in bytes.",
            "example": 512000
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Front view of Sony A90J TV"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "product_image",
              "front_view",
              "lifestyle"
            ]
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "description": "Locale the asset is primarily associated with (e.g., for localized documents).",
            "example": "en_US"
          },
          "metadata": {
            "type": "object",
            "description": "Custom metadata fields (e.g., alt text, copyright).",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "alt_text": "Sony Bravia A90J on a stand",
              "copyright": "\u00a9 2023 Example Inc."
            }
          },
          "renditions": {
            "type": "array",
            "description": "Available alternative versions/sizes of the asset.",
            "items": {
              "$ref": "#/components/schemas/AssetRendition"
            }
          },
          "usageRights": {
            "type": "object",
            "properties": {
              "validFrom": {
                "type": "string",
                "format": "date-time"
              },
              "validTo": {
                "type": "string",
                "format": "date-time"
              },
              "restrictions": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "filename",
          "type",
          "url",
          "mimeType",
          "size"
        ]
      },
      "AssetMetadataInput": {
        "type": "object",
        "description": "Editable metadata fields for an asset.",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locale": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "usageRights": {
            "type": "object",
            "properties": {
              "validFrom": {
                "type": "string",
                "format": "date-time"
              },
              "validTo": {
                "type": "string",
                "format": "date-time"
              },
              "restrictions": {
                "type": "string"
              }
            }
          }
        }
      },
      "AssetMetadataPatchInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssetMetadataInput"
          }
        ],
        "description": "Data for partially updating asset metadata.",
        "minProperties": 1
      },
      "AssetLink": {
        "type": "object",
        "description": "Details about the link between a product/variant and an asset.",
        "properties": {
          "assetId": {
            "type": "string",
            "example": "asset_a90j_front"
          },
          "variantId": {
            "type": "string",
            "nullable": true,
            "description": "If linked to a specific variant.",
            "example": "var_a90j_65"
          },
          "usageType": {
            "type": "string",
            "description": "Role of the asset (e.g., main image, gallery, manual).",
            "example": "main_image"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32",
            "description": "Order among assets of the same usage type.",
            "example": 1
          },
          "channelRestrictions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of channel IDs where this link is NOT applicable.",
            "example": [
              "ch_print_catalog"
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/AssetSummary",
            "description": "Summary of the linked asset (can be included)."
          }
        },
        "required": [
          "assetId"
        ]
      },
      "AssetLinkInput": {
        "type": "object",
        "description": "Data for creating or updating an asset link.",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "variantId": {
            "type": "string",
            "nullable": true
          },
          "usageType": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "channelRestrictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "assetId"
        ]
      },
      "Price": {
        "type": "object",
        "description": "Represents a specific price point for a product/variant.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique identifier for this specific price record (might be composite).",
            "example": "price_XR65A90J_pl_retail_usd"
          },
          "productId": {
            "type": "string",
            "readOnly": true
          },
          "variantId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "description": "ISO 4217 currency code.",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": 3799.99
          },
          "priceListId": {
            "type": "string",
            "example": "pl_retail_usd"
          },
          "customerGroupId": {
            "type": "string",
            "nullable": true,
            "description": "If the price is specific to a customer group."
          },
          "channelId": {
            "type": "string",
            "nullable": true,
            "description": "If the price is specific to a sales channel."
          },
          "quantityFrom": {
            "type": "integer",
            "format": "int32",
            "description": "Minimum quantity for this price tier.",
            "default": 1
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "currency",
          "amount",
          "priceListId"
        ]
      },
      "PriceInput": {
        "type": "object",
        "description": "Data for creating or updating a price point.",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": 3799.99
          },
          "priceListId": {
            "type": "string",
            "example": "pl_retail_usd"
          },
          "customerGroupId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "quantityFrom": {
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "currency",
          "amount",
          "priceListId"
        ]
      },
      "PriceList": {
        "type": "object",
        "description": "Defines a list or tier for managing prices.",
        "properties": {
          "id": {
            "type": "string",
            "example": "pl_retail_usd"
          },
          "name": {
            "type": "string",
            "example": "Retail Prices (USD)"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "Standard retail pricing for the US market."
          },
          "currencyDefault": {
            "type": "string",
            "nullable": true,
            "description": "Default currency for prices in this list.",
            "example": "USD"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "PriceListInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the price list.",
            "example": "pl_retail_usd"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "currencyDefault": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "JobStatus": {
        "type": "object",
        "description": "Status of an asynchronous bulk job.",
        "properties": {
          "jobId": {
            "type": "string",
            "example": "job_exp_67890"
          },
          "jobType": {
            "type": "string",
            "enum": [
              "import",
              "export",
              "syndication"
            ],
            "example": "export"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "queued",
              "running",
              "completed",
              "failed",
              "cancelled"
            ],
            "example": "running"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "description": "Percentage completion (0-100).",
            "example": 75
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Processed 7500 of 10000 products."
          },
          "errors": {
            "type": "array",
            "description": "List of errors encountered during a failed or partially failed job.",
            "items": {
              "type": "object",
              "properties": {
                "row": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Row number in input file (if applicable)."
                },
                "entityId": {
                  "type": "string",
                  "description": "ID of the entity causing the error."
                },
                "errorCode": {
                  "type": "string"
                },
                "errorMessage": {
                  "type": "string"
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "resultUrl": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "description": "URL to download the result file (for export jobs).",
            "example": "https://cdn.example.com/results/export_67890.csv"
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "jobId",
          "jobType",
          "status",
          "createdAt"
        ]
      },
      "ExportConfig": {
        "type": "object",
        "description": "Configuration for a bulk export job.",
        "properties": {
          "entityType": {
            "type": "string",
            "enum": [
              "product",
              "category",
              "attribute",
              "price",
              "asset"
            ],
            "description": "The type of entity to export.",
            "example": "product"
          },
          "format": {
            "type": "string",
            "enum": [
              "csv",
              "xlsx",
              "json",
              "xml"
            ],
            "default": "csv"
          },
          "columns": {
            "type": "array",
            "description": "Specific columns/fields to include in the export. Syntax depends on entity type (e.g., 'attributes.color'). If omitted, default columns are used.",
            "items": {
              "type": "string"
            },
            "example": [
              "sku",
              "name.en_US",
              "description.en_US",
              "status",
              "attributes.color",
              "attributes.size",
              "categories",
              "prices.pl_retail_usd.USD"
            ]
          },
          "filter": {
            "type": "object",
            "description": "Criteria to filter the entities to be exported (structure depends on entityType).",
            "additionalProperties": true,
            "example": {
              "status": "active",
              "category": "cat_electronics",
              "updatedSince": "2023-10-01T00:00:00Z"
            }
          },
          "locale": {
            "type": "string",
            "description": "Primary locale for exported localized data.",
            "example": "en_US"
          },
          "channelId": {
            "type": "string",
            "description": "Export data as prepared for a specific channel.",
            "nullable": true
          },
          "delimiter": {
            "type": "string",
            "description": "Delimiter for CSV format.",
            "default": ","
          },
          "includeHeaders": {
            "type": "boolean",
            "description": "Include header row in CSV/XLSX.",
            "default": true
          }
        },
        "required": [
          "entityType",
          "format"
        ]
      },
      "ImportConfig": {
        "type": "object",
        "description": "Configuration for a bulk import job.",
        "properties": {
          "entityType": {
            "type": "string",
            "enum": [
              "product",
              "category",
              "attribute",
              "price",
              "asset"
            ],
            "description": "The type of entity being imported.",
            "example": "product"
          },
          "mode": {
            "type": "string",
            "enum": [
              "create",
              "update",
              "upsert",
              "delete"
            ],
            "description": "How to handle imported records.",
            "default": "upsert"
          },
          "identifierField": {
            "type": "string",
            "description": "Field used to identify existing records for update/upsert/delete modes.",
            "default": "sku"
          },
          "locale": {
            "type": "string",
            "description": "Default locale for interpreting localized data in the import file.",
            "example": "en_US"
          },
          "createCategoriesIfNeeded": {
            "type": "boolean",
            "description": "Automatically create categories found in import data if they don't exist.",
            "default": false
          },
          "delimiter": {
            "type": "string",
            "description": "Delimiter used in the CSV file.",
            "default": ","
          },
          "dateFormat": {
            "type": "string",
            "description": "Format for date/datetime fields in the import file.",
            "example": "yyyy-MM-dd HH:mm:ss"
          }
        },
        "required": [
          "entityType"
        ]
      },
      "ImportData": {
        "type": "object",
        "description": "Structure for providing import data directly in the request body.",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ImportConfig"
          },
          "data": {
            "type": "array",
            "description": "Array of objects representing the entities to import.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "required": [
          "config",
          "data"
        ]
      },
      "Channel": {
        "type": "object",
        "description": "Represents a distribution channel.",
        "properties": {
          "id": {
            "type": "string",
            "example": "ch_web_us"
          },
          "name": {
            "type": "string",
            "example": "US Website"
          },
          "type": {
            "type": "string",
            "enum": [
              "ecommerce",
              "marketplace",
              "social",
              "print",
              "syndication_feed",
              "internal"
            ],
            "example": "ecommerce"
          },
          "targetSystem": {
            "type": "string",
            "nullable": true,
            "description": "Identifier for the target platform (e.g., 'magento', 'shopify', 'amazon_mws').",
            "example": "magento"
          },
          "localeDefault": {
            "type": "string",
            "description": "Default locale for this channel.",
            "example": "en_US"
          },
          "currencyDefault": {
            "type": "string",
            "description": "Default currency for this channel.",
            "example": "USD"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "configuration": {
            "type": "object",
            "description": "Channel-specific settings (API keys, feed URLs, mapping rules, etc.). Structure varies.",
            "additionalProperties": true,
            "example": {
              "baseUrl": "https://us.store.example.com/api",
              "apiKey": "...",
              "storeViewId": "1"
            }
          },
          "lastSyndication": {
            "$ref": "#/components/schemas/JobStatus",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "isActive"
        ]
      },
      "ChannelInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the channel.",
            "example": "ch_web_us"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ecommerce",
              "marketplace",
              "social",
              "print",
              "syndication_feed",
              "internal"
            ]
          },
          "targetSystem": {
            "type": "string",
            "nullable": true
          },
          "localeDefault": {
            "type": "string"
          },
          "currencyDefault": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "configuration": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "isActive"
        ]
      },
      "ProductSyndicationStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductSummary"
          }
        ],
        "properties": {
          "syndicationStatus": {
            "type": "string",
            "enum": [
              "syndicated",
              "pending",
              "failed",
              "excluded",
              "not_assigned"
            ],
            "description": "The product's current status for this specific channel.",
            "example": "syndicated"
          },
          "lastAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastSuccess": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SyndicationLogEntry": {
        "type": "object",
        "properties": {
          "logId": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "started",
              "completed",
              "failed",
              "product_success",
              "product_failure"
            ]
          },
          "productId": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "CompletenessScore": {
        "type": "object",
        "description": "Details about a product's data completeness.",
        "properties": {
          "overallScore": {
            "type": "number",
            "format": "float",
            "description": "Overall completeness percentage.",
            "example": 92.5
          },
          "overallStatus": {
            "type": "string",
            "enum": [
              "complete",
              "incomplete"
            ],
            "example": "complete"
          },
          "channelScores": {
            "type": "object",
            "description": "Completeness scores calculated against specific channel requirements.",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "format": "float"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "complete",
                    "incomplete"
                  ]
                },
                "missingAttributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "attributeId": {
                        "type": "string"
                      },
                      "attributeLabel": {
                        "$ref": "#/components/schemas/LocalizedString"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "ch_web_us": {
                "score": 98,
                "status": "complete",
                "missingAttributes": []
              },
              "ch_amazon_us": {
                "score": 85,
                "status": "incomplete",
                "missingAttributes": [
                  {
                    "attributeId": "attr_bullet_point_1",
                    "attributeLabel": {
                      "en_US": "Bullet Point 1"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "ValidationResult": {
        "type": "object",
        "description": "Results of a product data validation check.",
        "properties": {
          "isValid": {
            "type": "boolean",
            "example": false
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "required": [
          "isValid"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "example": "sku"
          },
          "locale": {
            "type": "string",
            "nullable": true,
            "example": "en_US"
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "description": "The value that failed validation.",
            "example": "INVALID SKU"
          },
          "message": {
            "type": "string",
            "example": "SKU must follow the pattern XX-NNNN."
          },
          "ruleCode": {
            "type": "string",
            "description": "Identifier for the validation rule.",
            "example": "sku_format_check"
          },
          "severity": {
            "type": "string",
            "enum": [
              "error",
              "warning"
            ],
            "default": "error"
          }
        }
      },
      "Workflow": {
        "type": "object",
        "description": "Definition of a product workflow.",
        "properties": {
          "id": {
            "type": "string",
            "example": "wf_standard_enrich"
          },
          "name": {
            "type": "string",
            "example": "Standard Product Enrichment"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "triggerEvent": {
            "type": "string",
            "enum": [
              "product_created",
              "status_changed",
              "manual"
            ],
            "description": "Event that initiates this workflow.",
            "example": "product_created"
          },
          "initialStatus": {
            "type": "string",
            "description": "The status a product enters when this workflow starts.",
            "example": "needs_copywriting"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "The status representing this step.",
                  "example": "needs_copywriting"
                },
                "name": {
                  "type": "string",
                  "description": "Display name for the step.",
                  "example": "Write Description"
                },
                "taskDefinition": {
                  "type": "object",
                  "properties": {
                    "taskName": {
                      "type": "string",
                      "example": "Write long description for {productName}"
                    },
                    "assigneeRule": {
                      "type": "string",
                      "description": "Rule to determine assignee (e.g., 'role:copywriter', 'user:specific_user')."
                    },
                    "defaultPriority": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "possibleTransitions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "example": "submit_for_review"
                      },
                      "nextStatus": {
                        "type": "string",
                        "example": "needs_marketing_review"
                      }
                    }
                  }
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "initialStatus",
          "steps"
        ]
      },
      "Task": {
        "type": "object",
        "description": "A task within a workflow assigned to a user.",
        "properties": {
          "id": {
            "type": "string",
            "example": "task_enrich_desc_123"
          },
          "name": {
            "type": "string",
            "example": "Write long description for Sony A90J TV"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "rejected"
            ],
            "example": "pending"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "assignee": {
            "type": "string",
            "nullable": true,
            "description": "User ID of the assignee.",
            "example": "user_copywriter_jane"
          },
          "productId": {
            "type": "string",
            "description": "ID of the product this task relates to.",
            "example": "prod_elec_tv_sony_bravia_xr_a90j"
          },
          "workflowId": {
            "type": "string",
            "example": "wf_standard_enrich"
          },
          "workflowStepStatus": {
            "type": "string",
            "description": "The workflow status this task corresponds to.",
            "example": "needs_copywriting"
          },
          "context": {
            "type": "object",
            "additionalProperties": true,
            "description": "Additional context for the task."
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "productId",
          "createdAt"
        ]
      },
      "TaskUpdateInput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "rejected"
            ]
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "assignee": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "minProperties": 1
      },
      "ProductWorkflowInfo": {
        "type": "object",
        "description": "Information about a product's current workflow state.",
        "properties": {
          "currentStatus": {
            "type": "string",
            "example": "needs_marketing_review"
          },
          "workflowId": {
            "type": "string",
            "example": "wf_standard_enrich"
          },
          "tasks": {
            "type": "array",
            "description": "Open tasks related to the current workflow step.",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "possibleTransitions": {
            "type": "array",
            "description": "Actions that can be taken from the current status.",
            "items": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "example": "approve"
                },
                "nextStatus": {
                  "type": "string",
                  "example": "ready_for_channel"
                }
              }
            }
          }
        }
      },
      "WorkflowTransitionInput": {
        "type": "object",
        "description": "Data required to transition a product's workflow status.",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action being performed (e.g., 'approve', 'reject', 'submit').",
            "example": "approve"
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Marketing description approved."
          },
          "assignee": {
            "type": "string",
            "nullable": true,
            "description": "Optional: Assignee for tasks in the next step."
          }
        },
        "required": [
          "action"
        ]
      },
      "User": {
        "type": "object",
        "description": "Represents a system user.",
        "properties": {
          "id": {
            "type": "string",
            "example": "user_editor_john"
          },
          "username": {
            "type": "string",
            "example": "john.doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "roles": {
            "type": "array",
            "description": "List of role IDs assigned to the user.",
            "items": {
              "type": "string"
            },
            "example": [
              "role_editor",
              "role_reviewer_marketing"
            ]
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "isActive"
        ]
      },
      "Role": {
        "type": "object",
        "description": "Represents a user role with associated permissions.",
        "properties": {
          "id": {
            "type": "string",
            "example": "role_editor"
          },
          "name": {
            "type": "string",
            "example": "Product Editor"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "description": "List of permission strings granted by this role.",
            "items": {
              "type": "string"
            },
            "example": [
              "read:products",
              "write:products",
              "read:assets",
              "write:assets",
              "read:categories",
              "perform:validation"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "id",
          "name",
          "permissions"
        ]
      },
      "AuditLogEntry": {
        "type": "object",
        "description": "An entry in the system's audit trail.",
        "properties": {
          "id": {
            "type": "string",
            "example": "log_abcdef123456"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "description": "ID of the user performing the action.",
            "example": "user_editor_jane"
          },
          "username": {
            "type": "string",
            "description": "Username at the time of action.",
            "example": "jane.roe"
          },
          "action": {
            "type": "string",
            "description": "The action performed (e.g., 'product:update').",
            "example": "product:update"
          },
          "entityType": {
            "type": "string",
            "description": "Type of the entity affected.",
            "example": "product"
          },
          "entityId": {
            "type": "string",
            "description": "ID of the entity affected.",
            "example": "prod_elec_tv_sony_bravia_xr_a90j"
          },
          "details": {
            "type": "object",
            "description": "Specific details of the change, often including before/after values.",
            "additionalProperties": true,
            "example": {
              "changes": [
                {
                  "field": "status",
                  "old": "draft",
                  "new": "active"
                },
                {
                  "field": "description.en_US",
                  "old": "...",
                  "new": "..."
                }
              ],
              "ipAddress": "192.168.1.100",
              "userAgent": "Mozilla/5.0..."
            }
          }
        },
        "required": [
          "id",
          "timestamp",
          "userId",
          "action"
        ]
      },
      "SystemHealth": {
        "type": "object",
        "description": "Overall system health status.",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "UP",
              "DOWN",
              "DEGRADED"
            ],
            "example": "UP"
          },
          "components": {
            "type": "object",
            "description": "Status of individual system components.",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "UP",
                    "DOWN"
                  ],
                  "example": "UP"
                },
                "details": {
                  "type": "string",
                  "nullable": true,
                  "description": "Additional details, especially on failure."
                }
              },
              "required": [
                "status"
              ]
            },
            "example": {
              "database": {
                "status": "UP"
              },
              "searchIndex": {
                "status": "UP"
              },
              "assetStorage": {
                "status": "UP"
              },
              "messageQueue": {
                "status": "UP"
              }
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "SystemStats": {
        "type": "object",
        "description": "High-level statistics about the PIM system.",
        "properties": {
          "productCount": {
            "type": "integer",
            "format": "int64",
            "example": 15320
          },
          "variantCount": {
            "type": "integer",
            "format": "int64",
            "example": 45800
          },
          "categoryCount": {
            "type": "integer",
            "format": "int32",
            "example": 250
          },
          "attributeCount": {
            "type": "integer",
            "format": "int32",
            "example": 512
          },
          "attributeGroupCount": {
            "type": "integer",
            "format": "int32",
            "example": 45
          },
          "assetCount": {
            "type": "integer",
            "format": "int64",
            "example": 75100
          },
          "channelCount": {
            "type": "integer",
            "format": "int32",
            "example": 8
          },
          "userCount": {
            "type": "integer",
            "format": "int32",
            "example": 52
          },
          "roleCount": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "pendingJobs": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "pendingTasks": {
            "type": "integer",
            "format": "int32",
            "example": 15
          },
          "upTimeSeconds": {
            "type": "integer",
            "format": "int64",
            "example": 864000
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Standard error response format.",
        "properties": {
          "traceId": {
            "type": "string",
            "description": "Unique identifier for tracing the request.",
            "example": "a7b3c1d9-e0f1-4a2b-8c3d-4e5f6a7b8c9d"
          },
          "code": {
            "type": "string",
            "description": "Application-specific error code.",
            "example": "VALIDATION_ERROR"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message.",
            "example": "Input validation failed."
          },
          "details": {
            "type": "array",
            "description": "Optional: More detailed information, often validation errors.",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "required": [
          "traceId",
          "code",
          "message"
        ]
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "draft",
          "discontinued"
        ],
        "description": "Common status for products and variants."
      }
    },
    "parameters": {
      "productId": {
        "name": "productId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the product.",
        "schema": {
          "type": "string",
          "example": "prod_elec_tv_sony_bravia_xr_a90j"
        }
      },
      "variantId": {
        "name": "variantId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the product variant (SKU).",
        "schema": {
          "type": "string",
          "example": "var_a90j_65"
        }
      },
      "categoryId": {
        "name": "categoryId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the category.",
        "schema": {
          "type": "string",
          "example": "cat_electronics_tv_video"
        }
      },
      "attributeId": {
        "name": "attributeId",
        "in": "path",
        "required": true,
        "description": "Unique identifier or code of the attribute.",
        "schema": {
          "type": "string",
          "example": "attr_screen_technology"
        }
      },
      "groupId": {
        "name": "groupId",
        "in": "path",
        "required": true,
        "description": "Unique identifier or code of the attribute group.",
        "schema": {
          "type": "string",
          "example": "group_display"
        }
      },
      "assetId": {
        "name": "assetId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the digital asset.",
        "schema": {
          "type": "string",
          "example": "asset_a90j_front"
        }
      },
      "priceId": {
        "name": "priceId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the specific price record.",
        "schema": {
          "type": "string",
          "example": "price_XR65A90J_pl_retail_usd"
        }
      },
      "listId": {
        "name": "listId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the price list.",
        "schema": {
          "type": "string",
          "example": "pl_retail_usd"
        }
      },
      "jobId": {
        "name": "jobId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the asynchronous bulk job.",
        "schema": {
          "type": "string",
          "example": "job_exp_67890"
        }
      },
      "channelId": {
        "name": "channelId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the distribution channel.",
        "schema": {
          "type": "string",
          "example": "ch_web_us"
        }
      },
      "workflowId": {
        "name": "workflowId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the workflow definition.",
        "schema": {
          "type": "string",
          "example": "wf_standard_enrich"
        }
      },
      "taskId": {
        "name": "taskId",
        "in": "path",
        "required": true,
        "description": "Unique identifier of the workflow task.",
        "schema": {
          "type": "string",
          "example": "task_enrich_desc_123"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of items to return per page.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 1000,
          "default": 20
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip for pagination.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "RESOURCE_NOT_FOUND",
              "message": "Product with ID 'prod_invalid_id' not found."
            }
          }
        }
      },
      "BadRequest": {
        "description": "Invalid request syntax or parameters (e.g., malformed filter, invalid parameter value).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "INVALID_PARAMETER",
              "message": "Invalid value 'abc' for parameter 'limit'. Must be an integer."
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication is required and has failed or has not yet been provided. Invalid or missing API key/token.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "AUTHENTICATION_FAILED",
              "message": "Invalid API Key provided."
            }
          }
        }
      },
      "Forbidden": {
        "description": "The authenticated user does not have permission to perform the requested action.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "AUTHORIZATION_FAILED",
              "message": "User does not have permission 'delete:products'."
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "The request was well-formed but could not be processed due to semantic errors (e.g., validation failure).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "VALIDATION_ERROR",
              "message": "Input validation failed.",
              "details": [
                {
                  "attributeId": "sku",
                  "message": "SKU 'DUPLICATE-SKU' already exists.",
                  "ruleCode": "uniqueness_sku",
                  "severity": "error"
                },
                {
                  "attributeId": "name.en_US",
                  "message": "Name is required for locale 'en_US'.",
                  "ruleCode": "required_field",
                  "severity": "error"
                }
              ]
            }
          }
        }
      },
      "PayloadTooLarge": {
        "description": "The request payload (e.g., uploaded file) exceeds the server's limit.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "traceId": "...",
              "code": "PAYLOAD_TOO_LARGE",
              "message": "File size exceeds the maximum allowed limit of 100MB."
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://developer.example.com/docs/pim-api"
  },
  "x-kong-name": "product-information-management-system-api"
}